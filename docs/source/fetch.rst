
**********************
Fetch Modules Overview
**********************

.. py:currentmodule:: jeta.archive.fetch

=============
Classes Index
=============

.. autoclass:: MSID
   :show-inheritance:
   :members:

.. autoclass:: MSIDset
   :show-inheritance:
   :members:

.. autoclass:: Msid
   :show-inheritance:
   :members:

.. autoclass:: Msidset
   :show-inheritance:
   :members:

=================================================
Fetching A Single Mnemonic Data Set Using IPython
=================================================

Start the ipython shell as normal with the matplotlib flag:

.. code-block:: ipython

    $ ipython --matplotlib

Import the fetch module:

.. code-block:: ipython

   # importing the fetch module
   In [1]: from jeta.archive import fetch

   fetch: using ENG_ARCHIVE=</path/to/archive> for archive path

----------------------
Identifying Data Range
----------------------

.. code-block:: ipython

    # Returns date range in ISO format
    In [1]: fetch.get_time_range(<mnenmonic>, "iso")
    Out[2]: ('2019-06-30 00:30:00.352', '2019-07-02 00:35:58.752')

    # Returns date range in JD format
    In [1]: fetch.get_time_range(<mnenmonic>, "date")
    Out[2]: (2458664.5208374076, 2458666.5249855556)

-----------------------------
Fetching Single Mnemonic Data
-----------------------------

To fetch data for a single mnenmonic create a instance of the *Msid (Mnemonic System Identifier)* class.

.. code-block:: python

   # e.x. Fetching per mnenmonic and plotting
   data = fetch.Msid('<mnenmonic>', '2019:001', '2019:002')
   data.plot()

This returns the python data structure (Msid Object) containing the data requested in the specified range. The
objects ``plot()`` method can then be called to display a plot of the data. The plot is generated by matplotlib.

------------------
Data Interpolation
------------------

To use the interpolation function first fetch a data set as described above
then call the ``interpolate()`` method. The next time ``plot()`` is called the
data will be interpolated.

.. code-block:: python

    In [3]: data.interpolate()

    In [4]: data.plot()

=================================================
Fetching A Multi-Mnemonic Data Set Using IPython
=================================================

----------------------------
Fetching Multi-Mnemonic Data
----------------------------

For some operations it may be useful to retrieve a set of Msid. To do this use the **MsidSet Object** in place of the Msid.

.. code-block:: python

    In [3]: fetch.Msidset([MNEMONIC_1, 'MNEMONIC_2'], '2019:001', '2019:365')

    Out[8]:
    Msidset([('MNEMONIC_1',
            <MSID start=2019:001:12:00:00.000 stop=2019:365:12:00:00.000 len=701 dtype=float64>),
            ('MNEMONIC_2',
            <MSID start=2019:001:12:00:00.000 stop=2019:365:12:00:00.000 len=175 dtype=bytes48>)])